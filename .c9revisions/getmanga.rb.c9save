{"ts":1358657540969,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"#enhanced image save\nrequire 'nokogiri'\nrequire 'open-uri'\nrequire 'yaml'\nrequire \"fileutils\"\nrequire 'pp'\n\nclass GetManga\n\n  attr_accessor :params\n  @params = {}\n\n  def initialize\n    # Load @params and prepare\n    @params = YAML::load(DATA)   \n    pp @params      \n  end\n\n  def download!   \n    chapters = chapter_range\n    if chapters.to_a.size == 1\n      puts \"Downloading chapter #{chapters.first}\"\n    else\n      puts \"Downloading chapters #{chapters.first} to #{chapters.last}\" \n    end \n    puts \"Total chapters : #{(chapters.max - chapters.min) + 1}\"\n    puts \"*\" * 25\n\n    chapter_threads = []\n\n    chapters.each do |chapter|\n      chapter_threads << Thread.new(chapter) {|c| download_chapter c}      \n    end\n    chapter_threads.each {|ct| ct.join}\n  end\n\n\n  def name \n    @params['name'].downcase.gsub(/[^\\d|\\w| ]/,'').gsub(/ /,'-') #downcase the name, remove special chars and replace spaces with hyphen.\n  end\n\n\n  def chapter_range\n    chapters = @params['chapter'].to_s\n    chapters = chapters.split('-').map { |e| e.to_i }\n    (chapters.first..chapters.last)  \n  end\n\n  def create_folder folder\n    puts \"creating folder #{folder}\"\n    unless Dir.exists? folder\n      FileUtils.mkdir_p folder\n    end\n  end  \n\n  def get_image_url(page_url)\n    Nokogiri::HTML(open(page_url)).inner_html.match(/\\<img.*src=\"(.*#{name}-\\d+.jpg)/)[1]\n  end\n\n\tdef download_image(src, dest)\n\t\tbegin\n\t    File.open(dest, \"wb\") do |saved_file|\n\t\t\t\topen(get_image_url(src), 'rb') do |read_file|\n\t\t\t    saved_file.write(read_file.read)\n\t\t\t\tend\n\t\t\tend\n\t\trescue Exception => e\n\t\t\tputs \"Error #{e.message} : Downloading #{src}\"\n\t\tend\n\tend\n\n  def download_chapter(chapter)\n    puts \"Downloading chapter #{chapter}\"\n    url = \"#{@params['site']}/#{name}/#{chapter}\"\n\n    # get total page numbers\n    doc = Nokogiri::HTML(open(url))\n    pages = doc.inner_html.match(/<\\/select> of (\\d+)/)[1].to_i\n\n    puts \"total pages in chapter #{chapter} is #{pages}\"\n\n    # create folders if not available.\n    folder = File.join(@params['folder'],name,chapter.to_s)\n    create_folder folder\n\n    threads = []\n\n    # for each page\n    1.upto pages do |page|\n      threads << Thread.new(page) {|pagenum|\n        page_url = url + \"/\" + pagenum.to_s           \n        #puts img        \n        download_image(page_url, File.join(folder,\"#{pagenum}.jpg\"))\n        print \"#\"\n      }\n    end\n    threads.each {|aThread| aThread.join}      \n  end \n\nend\n\nGetManga.new.download!\n\n__END__\nsite: http://www.mangareader.net\nname: PSYCHIC ODAGIRI KYOUKO'S LIES\nchapter: 1-3\nfolder: d:/temp/comics\n"]],"start1":0,"start2":0,"length1":0,"length2":2556}]],"length":2556}
{"contributors":[],"silentsave":false,"ts":1358657685229,"patch":[[{"diffs":[[0,"ils\""],[-1,"\nrequire 'pp'"],[0,"\n\ncl"]],"start1":89,"start2":89,"length1":21,"length2":8}]],"length":2543,"saved":false}
{"ts":1358657914898,"patch":[[{"diffs":[[0,"def "],[1,"comic_"],[0,"name \n"],[-1,""],[0,"    "]],"start1":757,"start2":757,"length1":14,"length2":20},{"diffs":[[0,"c=\"(.*#{"],[1,"comic_"],[0,"name}-\\d"]],"start1":1311,"start2":1311,"length1":16,"length2":22},{"diffs":[[0,"te']}/#{"],[1,"comic_"],[0,"name}/#{"]],"start1":1723,"start2":1723,"length1":16,"length2":22},{"diffs":[[0,"ilable.\n"],[-1,""],[0,"    fold"]],"start1":1975,"start2":1975,"length1":16,"length2":16},{"diffs":[[0,"older'],"],[1,"comic_"],[0,"name,cha"]],"start1":2016,"start2":2016,"length1":16,"length2":22}]],"length":2567,"saved":false}
{"ts":1358659850146,"patch":[[{"diffs":[[0,"\t\tend\n\tend\n\n"],[1,"  def page_count(url)        \n      Nokogiri::HTML(open(url)).inner_html.match(/<\\/select> of (\\d+)/)[1].to_i        \n  end\n    \n"],[0,"  def downlo"]],"start1":1613,"start2":1613,"length1":24,"length2":153},{"diffs":[[0,"    "],[-1,"doc = Nokogiri::HTML(open(url))\n    pages = doc.inner_html.match(/<\\/select> of (\\d+)/)[1].to_i\n"],[1,"pages = page_count url"],[0,"\n   "]],"start1":1914,"start2":1914,"length1":104,"length2":30}]],"length":2622,"saved":false}
{"ts":1358659892079,"patch":[[{"diffs":[[0,"r: 1"],[-1,"-3"],[0,"\nfol"]],"start1":2592,"start2":2592,"length1":10,"length2":8}]],"length":2620,"saved":false}
{"contributors":[],"silentsave":false,"ts":1358660143325,"patch":[[{"diffs":[[0,"   \n"],[-1,"    pp @params      \n"],[0,"  en"]],"start1":229,"start2":229,"length1":29,"length2":8}]],"length":2599,"saved":false}
